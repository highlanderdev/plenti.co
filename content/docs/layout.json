{
    "title": "Layout",
    "group": "Structure",
    "order": 2.01,
    "sections": [
        {
            "title": "Svelte",
            "body": [
                {
                    "p": [
                        "All the templating is done in the \"disappearing\" JS component framework called <a href='https://svelte.dev/'>Svelte</a>.",
                        "Svelte offers a simplified syntax and creates a welcoming developer experience for folks coming directly from an HTML/CSS background.",
                        "It also offers some performance benefits over similar frameworks since it doesn't require a virtual DOM and its runtime is rather small."
                    ]
                }
            ]
        },
        {
            "title": "layout/global/html.svelte",
            "body": [
                {
                    "p": [
                        "The <code>layout/global/html.svelte</code> file is important and changing its name will break your app.",
                        "You could also potentially break your routing if you're not careful with <code>&lt;svelte:component this={route} {...node.fields} {allNodes} /&gt;</code>.",
                        "Once you're aware of those two things, this file shouldn't be too scary and is meant for you to customize."
                    ]
                }
            ]
        },
        {
            "title": "layout/content/",
            "body": [
                {
                    "p": [
                        "Files that live in this folder correspond directly to the types defined in your content source.",
                        "For example if you have <em>blog</em> type (<code>content/blog/post-whatever.json</code>) you would create a corresponding template at <code>layout/content/blog.svelte</code>.",
                        "One template should be used per type and it will feed many content files to create individual nodes (endpoints)."
                    ]
                },
                {
                    "p": [
                        "The rest of the structure is really up to you.",
                        "We try to create logical default folders, such as <code>layout/components/</code> for reusable widgets and <code>layout/scripts/</code> for helper functions,",
                        "but feel free to completely change these and make the structure your own."
                    ]
                }
            ]
        }
    ]
}